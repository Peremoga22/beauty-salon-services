@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity
@inherits OwningComponentBase<UserManager<AppUser>>
@inject UserManager<AppUser> _userManager
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration


<header id="header" class="u-header u-header--abs-top-md u-header--show-hide-md"
        data-header-fix-moment="500"
        data-header-fix-effect="slide">
    <div class="u-header__section">
        <div id="logoAndNav" class="container col-12 col-sm-12 col-md-12 col-xl-12">
            <nav class="js-mega-menu navbar navbar-expand-md u-header__navbar u-header__navbar--no-space ">
                <img src="@("./fotos/logo/logo" + RandomImage() + ".jpg")" style="height:70px;width:40px;" class="col-sm-1 m-lg-3 collapse navbar-collapse u-header__navbar-collapse" />
                <a class="navbar-brand col-2 u-header__navbar-brand u-header__navbar-brand-center" href="/">

                    <span class="u-header__navbar-brand-text navbar-expand-lg">Beauty Salon</span>
                </a>
                <button type="button" class="navbar-toggler btn u-hamburger"
                        aria-label="Toggle navigation"
                        aria-expanded="false"
                        aria-controls="navBar"
                        data-toggle="collapse"
                        data-target="#navBar">
                    <span id="hamburgerTrigger" class="u-hamburger__box">
                        <span class="u-hamburger__inner"></span>
                    </span>
                </button>
                <div id="navBar" class="@NavMenuCssClass collapse navbar-collapse u-header__navbar-collapse" @onclick="ToggleNavMenu">
                    <ul class="navbar-nav u-header__navbar-nav">
                        @*<NavLink class="nav-link" href="/">
            <span class="active p-4" aria-hidden="true">Home</span>
        </NavLink>*@
                        <li class="nav-item hs-has-sub-menu u-header__nav-item  p-1"
                            data-event="hover"
                            data-animation-in="slideInUp"
                            data-animation-out="fadeOut">
                            <a id="pagesMegaMenu" class="nav-link u-header__nav-link-toggle" href="javascript:;" aria-haspopup="true" aria-expanded="false" aria-labelledby="pagesSubMenu">Services</a>
                            <ul id="pagesSubMenu" class="hs-sub-menu u-header__sub-menu" aria-labelledby="pagesMegaMenu" style="min-width: 180px;">
                                <NavLink class="nav-link" href="#">
                                    <span class="active p-1" aria-hidden="true">Hair</span>
                                </NavLink>
                                <NavLink class="nav-link" href="#">
                                    <span class="active p-1" aria-hidden="true">Nails</span>
                                </NavLink>
                                <NavLink class="nav-link" href="price-massage">
                                    <span class="active p-1" aria-hidden="true">Massage</span>
                                </NavLink>
                            </ul>
                        </li>
                        @if (authenticationStateTask.Result.User.Identity.IsAuthenticated)
                        {
                            <NavLink class="nav-link" href="shares">
                                <span class="active p-1" aria-hidden="true">Shares</span>
                            </NavLink>
                        }
                        <NavLink class="nav-link" href="contact-us-all">
                            <span class="active p-1" aria-hidden="true">ContactUs</span>
                        </NavLink>
                        <NavLink class="nav-link" href="faq">
                            <span class="active p-1" aria-hidden="true">FAQ</span>
                        </NavLink>
                        @if (authenticationStateTask.Result.User.Identity.IsAuthenticated)
                        {
                            <NavLink class="nav-link" href="">
                                <span class="active p-1" aria-hidden="true">Order</span>
                            </NavLink>
                        }
                        <AuthorizeView Roles="Admin,User">
                            <NotAuthorized>
                                <a href="Identity/Account/Login" class="p-1 m-3" aria-haspopup="true" aria-expanded="false">LogIn</a>
                            </NotAuthorized>
                            <Authorized>
                                @if (User != Admin)
                                {
                                    <form method="post" action="Identity/Account/LogOut">
                                        <button type="submit" class="nav-link btn btn-link p-1 ">Logout</button>
                                    </form>
                                }
                                else
                                {
                                    <a href="/admin-home" class="p-1 " aria-haspopup="true" aria-expanded="false">AdminPanel</a>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
</header>



@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public string User;
    public string Admin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        User = user.Identity.Name;
        var config = Configuration.GetValue<string>("Admin:Login");
        Admin = config;
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
    protected void hrefHeader(HrefName hrefName)
    {
        switch (hrefName)
        {
            case HrefName.Index:
                NavigationManager.NavigateTo("/");
                break;

            case HrefName.Portfolio:
                NavigationManager.NavigateTo("/allPortfolio");
                break;

            case HrefName.Service:
                NavigationManager.NavigateTo("/services");
                break;

            case HrefName.ContactUs:
                NavigationManager.NavigateTo("/adminContactUs");
                break;

            case HrefName.Faq:
                NavigationManager.NavigateTo("/adminFaq");
                break;

            default: break;
        }

    }
    protected enum HrefName
    {
        Index,
        Portfolio,
        Service,
        ContactUs,
        Faq
    }
    protected string RandomImage()
    {
        Random rand = new Random();

        var img = rand.Next(1, 9);
        return img.ToString();
    }
    //@onclick="(()=> CheakUserIdentity())"
    protected void CheakUserIdentity()
    {
        var authState = authenticationStateTask;
        var user = authState.Result;
        if (!user.User.Identity.IsAuthenticated)
        {
            var ReturnUrl = "";
            NavigationManager.NavigateTo($"Identity/Account/Login{ ReturnUrl}", forceLoad: true);
            this.StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("test");
        }
    }
    //@onclick="(()=> CheakUserIdentityShared())"
    protected void CheakUserIdentityShared()
    {
        var authState = authenticationStateTask;
        var user = authState.Result;
        if (!user.User.Identity.IsAuthenticated)
        {
            var ReturnUrl = "";
            NavigationManager.NavigateTo($"Identity/Account/Login{ ReturnUrl}", forceLoad: true);
            this.StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("shares");
        }
    }
}



