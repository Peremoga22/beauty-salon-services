@page "/edit-price-massage"
@page "/edit-price-massage/{Id:int}"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject PriceMassageService PriceMassageService

@if (Id == 0)
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-md-3">
            <li class="breadcrumb-item"><a href="/admin-price-massage"> Price massage</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add Price Massage</li>
        </ol>
    </nav>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-3">
            <li class="breadcrumb-item"><a href="/admin-price-massage"> Price massage</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Price massage</li>
        </ol>
    </nav>
}
<EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="card-body shadow-primary-lg p-3 mb-5 rounded">
    <DataAnnotationsValidator />
    <div>
        <div class="row d-flex">
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Title:<span style="color:red;">*</span></label>
                <InputText id="category" @bind-Value="model.Description" class="form-control promotions-datepicker" />
            </div>
        </div>
    </div>
    <div>
        <div class="row d-flex">
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Price:<span style="color:red;">*</span></label>
                <InputNumber id="category" @bind-Value="model.Price" class="form-control promotions-datepicker" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-price-massage">Cancel</NavLink>
        </div>
        <div class="p-3">
            <button type="button" class="btn btn-danger m-2" @onclick="(() => Delete(model.Id))">Delete</button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }

    protected PriceMassage model = new PriceMassage();

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            model = await PriceMassageService.GetById(Id);
        }

    }
    private void HandleValidSubmit()
    {
        PriceMassageService.Save(model);
        NavigationManager.NavigateTo("/admin-price-massage");
    }
    protected async Task Delete(int priseMassageId)
    {
        await PriceMassageService.DeleteAsync(priseMassageId);
        NavigationManager.NavigateTo("/admin-price-massage");
        this.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
}
