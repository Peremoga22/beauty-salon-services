@page "/edit-admin-users"
@page "/edit-admin-users/{Id}"
@layout AdminLayout
@using Microsoft.AspNetCore.Identity
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<AppUser> UserManager
@inject IdentityService IdentityService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



@if (string.IsNullOrEmpty(Id))
{
    <h3 class="m-7">Add User Email for Login</h3>
}
else
{
    <h3 class="m-7">Edit User Email for Login</h3>
}
<EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="card-body shadow-primary-lg p-3 mb-5 rounded">
    <DataAnnotationsValidator />
    <div>
        <div class="row d-flex">
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Email User:<span style="color:red;">*</span></label>
                <InputText @bind-Value="model.UserName" class="form-control promotions-datepicker" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-users">Cancel</NavLink>
        </div>
        <div class="p-3">
            <button type="button" class="btn btn-danger m-2" @onclick="(() => Delete(model))">Delete</button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]

    public string Id { get; set; }

    private IEnumerable<AppUser> listModel = new List<AppUser>();
    private AppUser model = new AppUser();

    // private EditContext EditContext;

    protected override async Task OnInitializedAsync()
    {
        model = await UserManager.FindByIdAsync(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
    private void HandleValidSubmit()
    {
        IdentityService.Save(model);
        NavigationManager.NavigateTo("/admin-users");
    }
    protected async Task Delete(AppUser identityUser)
    {
        await UserManager.DeleteAsync(identityUser);

        NavigationManager.NavigateTo("/admin-users");
        this.StateHasChanged();
    }
}
