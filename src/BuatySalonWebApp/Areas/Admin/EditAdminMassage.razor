@page "/edit-massage-services"
@page "/edit-massage-services/{Id:guid}"
@inject CategoryAllMassageService CategoryAllMassageService
@inject MassageService MassageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject MassageImageService MassageImageService
@layout AdminLayout
@using Microsoft.Extensions.Caching.Memory
@inject IMemoryCache cache

@if (!Guid.Empty.Equals(Id))
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-md-3">
            <li class="breadcrumb-item"><a href="/admin-massage-all"> Massage</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Massage</li>
        </ol>
    </nav>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-3">
            <li class="breadcrumb-item"><a href="/admin-massage-all">Massage</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add Massage</li>
        </ol>
    </nav>
}
@*<EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="card-body shadow-primary-lg p-3 mb-5 rounded">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-massage-all">Cancel</NavLink>
        </div>
    </div>
    <div>
        <div class="row d-flex m-sm-3">
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Category:<span style="color:red;">*</span></label>
                <div class="row">
                    @foreach (var item in categories)
                    {
                        <div class="col-sm-2">
                            <div class="custom-control custom-checkbox custom-control-inline">
                                <input type="checkbox" checked="@checkMassageCategories.Where(c=>c.Key==item.Id).SingleOrDefault().Value" @onclick="(() => checkCategory(item.Id))" id="checkbox_@item.Id" name="customCheckboxInline1" class="custom-control-input">
                                <label class="custom-control-label" for="checkbox_@item.Id">@item.Name</label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-12 form-group">
                <label class="file-attachment-input" for="fileAttachmentInput">
                    <img src="data:image/jpg;base64, @model.Image" class="img-thumbnail" alt="" />
                    <small class="d-block text-muted">Maximum file size 2MB</small>
                    <InputFile OnChange="HandleFileSelected" />
                </label>
                @if (ErrorMessage != "")
                {
                    <label style="color:red">@ErrorMessage</label>
                }
            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Title:<span style="color:red;">*</span></label>
                <InputText id="title" @bind-Value="model.Title" class="form-control promotions-datepicker" />
            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-description">Short Description:<span style="color:red;">*</span></label>
                <InputTextArea id="description" @bind-Value="model.ShortDescription" class="form-control" rows="7" />

            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-description">Long Description:<span style="color:red;">*</span></label>
                <InputTextArea id="description" @bind-Value="model.LongDescription" class="form-control" rows="9" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto p-4">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-massage-all">Cancel</NavLink>
        </div>
        <div class="ml-sm-3  p-sm-5 p-2 m-2">
            <button type="button" class="btn btn-danger m-2" @onclick="(() => Delete(model.Id))">Delete</button>
        </div>
    </div>
</EditForm>*@

<div class="card-body">
    <div class="shadow-primary-lg p-3 mb-2 rounded">
        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="body  p-3 mb-5 rounded ">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="ml-sm-3 m-auto">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <NavLink class="btn btn-outline-secondary" href="/admin-portfolio">Cancel</NavLink>
                </div>
            </div>
            <div class="row d-flex m-sm-3">
                <div class="col-lg-12 form-group">
                    <label for="category">Category:<span style="color:red;">*</span></label>
                    <div class="row">
                        @foreach (var item in categories)
                        {
                            <div class="col-sm-2">
                                <div class="custom-control custom-checkbox custom-control-inline">
                                    <input type="checkbox" checked="@checkMassageCategories.Where(c=>c.Key==item.Id).SingleOrDefault().Value" @onclick="(() => checkCategory(item.Id))" id="checkbox_@item.Id" name="customCheckboxInline1" class="custom-control-input">
                                    <label class="custom-control-label" for="checkbox_@item.Id">@item.Name</label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-lg-12 form-group">
                    <label class="file-attachment-input" for="fileAttachmentInput">
                        <img src="data:image/jpg;base64, @model.Image" class="img-thumbnail" alt="" />
                        <small class="d-block text-muted">Maximum file size 2MB</small>
                        <InputFile OnChange="HandleFileSelected" />
                    </label>
                    @if (ErrorMessage != "")
                    {
                        <label style="color:red">@ErrorMessage</label>
                    }
                </div>
                <hr />
                <div class="col-lg-12 form-group">
                    <label for="title">Title:<span style="color:red;">*</span></label>
                    <InputText id="title" @bind-Value="model.Title" class="form-control promotions-datepicker" />
                </div>
                <div class="col-lg-12 form-group">
                    <label for="description">Short Description:<span style="color:red;">*</span></label>
                    <InputTextArea id="description" @bind-Value="model.ShortDescription" class="form-control" rows="7" />

                </div>
                <div class="col-lg-12 form-group">
                    <label for="promotions-description">Long Description:<span style="color:red;">*</span></label>
                    <InputTextArea id="description" @bind-Value="model.LongDescription" class="form-control" rows="9" />

                </div>
               
            </div>

            <h2>Additional Portfolio for Carousel:</h2>
            <div>
                <div class="text-left m-3">
                    <button type="button" class="btn btn-primary mb-1" @onclick="Collaps">&nbsp;+&nbsp;</button>
                </div>
            </div>
        </EditForm>
        <div class="@(Collapsed? "collapse": "" )">
            <EditForm Model="modelImage" OnValidSubmit="HandleValidSubmitCarousel" class="body  p-3 mb-5 rounded ">
                <small class="d-block text-muted">Add only carousel in view portfolio</small>
                <div class="col-lg-12 form-group">
                    <label class="file-attachment-input" for="fileAttachmentInput">
                        <img src="data:image/jpg;base64, @modelImage.Nmae" class="img-thumbnail" alt="" />
                        <small class="d-block text-muted">Maximum file size 2MB</small>
                        <InputFile OnChange="HandleFileSelectedCarousel" />
                    </label>
                    @if (ErrorMessage != "")
                    {
                        <label style="color:red">@ErrorMessage</label>
                    }
                </div>
                <div class="row">
                    <div class="ml-lg-3 m-3">
                        @if (modelImage == null)
                        {
                            <button type="submit" class="btn btn-primary">Edit</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary">Add</button>
                        }

                        <NavLink class="btn btn-outline-secondary" href="/admin">Cancel</NavLink>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="table-responsive-md u-datatable   p-3 mb-5 rounded">
            <table class="js-datatable table table-borderless u-datatable__striped u-datatable__content">
                <thead>
                    <tr class="text-uppercase font-size-1 row">
                        <th scope="col" class="font-weight-medium col-2">
                            <div class="d-flex justify-content-between align-items-center">
                                View Image
                                <div class="ml-2">
                                </div>
                            </div>
                        </th>
                    </tr>
                </thead>
                @foreach (var item in model.MassageImages)
                {
                    <tbody class="font-size-1">
                        <tr class="row">
                            <td class="col-1">
                                <a class="btn btn-xs btn-icon btn-soft-secondary transition-3d-hover" href="javascript:;" @onclick="(() => EditAdd(item))" data-toggle="tooltip" data-placement="top" title="" data-original-title="Edit">
                                    <span class="fas fa-pen btn-icon__inner"></span>
                                </a>
                                <a type="button" class="btn btn-xs btn-icon btn-soft-danger" href="javascript:;" @onclick="(() => DeleteAdd(item))" disabled="">
                                    <span class="fas fa-times btn-icon__inner"></span>
                                </a>

                            </td>
                            <td class="col-1">
                                <img src="data:image/jpg;base64, @item.Nmae" class="img-thumbnail" style="height:120px;width:840px;" alt="" />
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-massage-all">Cancel</NavLink>
        </div>
        <div class="p-3">
            <button type="button" class="btn btn-danger" @onclick="(() => Delete(model.Id))">Delete</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid Id { get; set; }

    private IFileListEntry fileImage;
    protected bool Collapsed = true;

    protected MassageAllModel model = new MassageAllModel();
    protected MassageImage modelImage = new MassageImage();
    protected List<CategoryMassageModel> categories = new List<CategoryMassageModel>();
    protected string CategoryId = "0";
    protected CategoryMassageModel category = new CategoryMassageModel();
    protected int categoryId { get; set; }
    protected string ErrorMessage = "";
    protected IDictionary<int, bool> checkMassageCategories = new Dictionary<int, bool>();
    protected IEnumerable<MassageAllModel> massage = new List<MassageAllModel>();
    protected List<MassageImage> listImage = new List<MassageImage>();

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryAllMassageService.GetAllListAsync();
        foreach (var item in categories)
        {
            checkMassageCategories.Add(item.Id, false);
        }
        if (!Guid.Empty.Equals(Id))
        {
            model = await MassageService.GetById(Id);
            if (model.MassageAllModelCategories != null)
            {
                foreach (var item in model.MassageAllModelCategories)
                {
                    var key = checkMassageCategories.Where(c => c.Key == item.CategoryMassageModelId).FirstOrDefault().Key;
                    checkMassageCategories[key] = true;
                }
            }
        }
    }
    private void HandleValidSubmit()
    {
        var listCategoryMassage = checkMassageCategories.Where(c => c.Value == true).Select(c => c.Key).ToList();
        cache.Remove("KeyAdminMassagePage");
        cache.Remove("KeyMassagePage");
        MassageService.Save(model, listCategoryMassage);
        NavigationManager.NavigateTo("/admin-massage-all");

    }
    private void HandleValidSubmitCarousel()
    {
        if (modelImage.Id == 0)
        {

            model.MassageImages.Add(modelImage);
        }
        else
        {
            model.MassageImages.Where(p => p.Id == modelImage.Id).SingleOrDefault().Nmae = modelImage.Nmae;
        }
        modelImage = new MassageImage();

        this.StateHasChanged();
    }

    public async Task HandleFileSelectedCarousel(IFileListEntry[] files)
    {
        var fileImage = files.FirstOrDefault();
        if (fileImage != null)
        {
            ErrorMessage = "";
            if (fileImage.Size > 2097152)
            {
                ErrorMessage = "File size more 2 MB!";
                this.ShouldRender();
                return;
            }
            var ms = new MemoryStream();
            await fileImage.Data.CopyToAsync(ms).ConfigureAwait(false);
            ms.Position = 0;
            modelImage.Nmae = Convert.ToBase64String(ms.ToArray());
            this.ShouldRender();
        }
    }
    protected void EditAdd(MassageImage item)
    {
        Collapsed = false;
        modelImage = item;
        this.StateHasChanged();
    }

    protected async void DeleteAdd(MassageImage item)
    {
        await MassageImageService.DeleteAsync(item.Id);
        this.StateHasChanged();
    }

    private void Collaps()
    {
        Collapsed = !Collapsed;
    }
    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            ErrorMessage = "";
            if (file.Size > 2097152)
            {
                ErrorMessage = "File size more 2 MB!";
                this.ShouldRender();
                return;
            }
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms).ConfigureAwait(false);
            ms.Position = 0;
            model.Image = Convert.ToBase64String(ms.ToArray());
            this.ShouldRender();
        }
    }
    public void checkCategory(int id)
    {
        var check = checkMassageCategories.Where(c => c.Key == id).FirstOrDefault().Value;
        checkMassageCategories[id] = !check;
        this.ShouldRender();
    }
    protected async Task Delete(Guid id)
    {
        await MassageService.DeleteAsync(id);
        massage = await MassageService.GetAllListAsync();
        cache.Remove("KeyAdminMassagePage");
        cache.Remove("KeyMassagePage");
        NavigationManager.NavigateTo("/admin-massage-all");
        this.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
}
