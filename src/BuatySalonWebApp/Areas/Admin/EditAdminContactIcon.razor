@page "/edit-contact-us-icons"
@page "/edit-contact-us-icons/{Id:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ContactUsIconService ContactUsIconService
@layout AdminLayout


@if (Id == 0)
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-md-3">
            <li class="breadcrumb-item"><a href="/admin-contact-us-icons">Icons</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add Icons</li>
        </ol>
    </nav>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-3">
            <li class="breadcrumb-item"><a href="/admin-contact-us-icons"> Icons</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Icons</li>
        </ol>
    </nav>
}
<EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="card-body shadow-primary-lg p-3 mb-5 rounded">
    <DataAnnotationsValidator />
    <div>
        <div class="col-lg-12 form-group">
            <label class="file-attachment-input" for="fileAttachmentInput">
                <img src="data:image/svg+xml;base64, @model.Icon" class="js-svg-injector" style="height:60px;width:60px;" alt="" />
                <small class="d-block text-muted">Only Icon</small>
                <InputFile OnChange="HandleFileSelected" />
            </label>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-contact-us-icons">Cancel</NavLink>
        </div>
        <div class="p-3">
            <button type="button" class="btn btn-danger m-2" @onclick="(() => Delete(model.Id))">Delete</button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    protected IFileListEntry file;

    protected ContactUsIcon model = new ContactUsIcon();
    protected List<ContactUsIcon> contactUsIcons = new List<ContactUsIcon>();

    protected override async Task OnInitializedAsync()
    {
        contactUsIcons = await ContactUsIconService.GetAllListAsync();
        if(Id != 0)
        {
            model = await ContactUsIconService.GetById(Id);
        }
    }
    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms).ConfigureAwait(false);
        ms.Position = 0;

        model.Icon = Convert.ToBase64String(ms.ToArray());
        this.ShouldRender();
    }
    private void HandleValidSubmit()
    {
        ContactUsIconService.Save(model);
        NavigationManager.NavigateTo("/admin-contact-us-icons");
    }
    protected async Task Delete(int iconsId)
    {
        await ContactUsIconService.DeleteAsync(iconsId);

        NavigationManager.NavigateTo("/admin-contact-us-icons");
        this.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
}
