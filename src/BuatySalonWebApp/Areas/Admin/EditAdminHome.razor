@page "/edit-home"
@page "/edit-home/{Id:guid}"
@inject FashionService FashionService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Microsoft.Extensions.Caching.Memory
@inject IMemoryCache cache
@layout AdminLayout

@if (!Guid.Empty.Equals(Id))
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-md-3">
            <li class="breadcrumb-item"><a href="/admin-home">Fashion</a></li>
            <li class="breadcrumb-item active" aria-current="page">Edit Fashion</li>
        </ol>
    </nav>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb breadcrumb-no-gutter mb-3 m-3">
            <li class="breadcrumb-item"><a href="/admin-home">Fashion</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add Fashion</li>
        </ol>
    </nav>
}
<EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="card-body">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="ml-lg-3 m-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-home">Cancel</NavLink>
        </div>
    </div>
    <div class="shadow-primary-lg p-3 mb-2 rounded">
        <div class="row d-flex">
            <div class="col-lg-12 form-group">

                <label class="file-attachment-input" for="fileAttachmentInput">
                    <img src="data:image/jpg;base64, @model.Image" class="img-thumbnail" alt="" />
                    <small class="d-block text-muted">Maximum file size 2MB</small>
                    <InputFile OnChange="HandleFileSelected" />
                </label>
                @if (ErrorMessage != "")
                {
                    <label style="color:red">@ErrorMessage</label>
                }
            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-title">Title:<span style="color:red;">*</span></label>
                <InputText id="title" @bind-Value="model.Title" class="form-control promotions-datepicker" />
            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-description">Short Description:<span style="color:red;">*</span></label>
                <InputTextArea id="description" @bind-Value="model.ShortDescription" class="form-control" rows="7" />

            </div>
            <div class="col-lg-12 form-group">
                <label for="promotions-description">Long Description:<span style="color:red;">*</span></label>
                <InputTextArea id="description" @bind-Value="model.LongDescription" class="form-control" rows="9" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="ml-sm-3 m-auto">
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink class="btn btn-outline-secondary" href="/admin-home">Cancel</NavLink>
        </div>
        <div class="p-3">
            <button type="button" class="btn btn-danger m-2" @onclick="(() => Delete(model.Id))">Delete</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    protected IFileListEntry file;

    protected IEnumerable<Fashion> listFashion = new List<Fashion>();
    protected Fashion model = new Fashion();

    protected string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.Empty.Equals(Id))
        {
            model = await FashionService.GetById(Id);
        }
    }
    private void HandleValidSubmit()
    {
        cache.Remove("KeyAdminFashionPage");
        cache.Remove("KeyIndexPade");
        FashionService.Save(model);
        NavigationManager.NavigateTo("/admin-home");
    }
    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            ErrorMessage = "";
            if (file.Size > 2097152)
            {
                ErrorMessage = "File size more 2 MB!";
                this.ShouldRender();
                return;
            }
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms).ConfigureAwait(false);
            ms.Position = 0;
            model.Image = Convert.ToBase64String(ms.ToArray());
            this.ShouldRender();
        }
    }
    protected async Task Delete(Guid id)
    {
        await FashionService.DeleteFashionAsync(Id);
        listFashion = await FashionService.GetAllListAync();
        NavigationManager.NavigateTo("/admin-home");
        this.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScripts");
        }
    }
}
